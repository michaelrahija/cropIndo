countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, clat = lat, text = hover,
marker = list(size = sqrt(amount/10000) + 1),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount/10000) + 1),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("red"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount/10000) + 1),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount/10000) + 1),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount/10000) + 1),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount/1000) + 1),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount) + 1),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = sqrt(amount/1000) + 1),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = (amount/1000) + 1),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
dir <- "~/Dropbox/ad_hoc_R/agGraphics/"
setwd(dir)
data1 <- read.csv("master.csv", stringsAsFactors = FALSE)
data1$hover <- paste(data1$country, "Amount", data1$amount, " USD")
data1$q <- with(data1, cut(amount, quantile(amount)))
levels(data1$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data1$q <- as.ordered(data1$q)
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = (amount/1000)),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = (amount/10)),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = (amount/100)),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
filter(master.t,country == "Cabo Verde")
#create maps
#create maps and figures for analysis
#-- import data and packages
library(DT)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(maps)
library(countrycode)
library(scales)
library(igraph)
library(gisfao)
library(sp)
sys <- Sys.info()
if(sys[7] == "josh"){
dir = "~/Documents/Github/EAR_pilot/"
} else if(sys[5] == "x86_64"){
dir = "~/Dropbox/FAO_ESS_STUFF/EAR_pilot" #Mac
data.dir = "~/Dropbox/FAO_ESS_STUFF/EAR_pilot_data/"
} else if (sys[5] == "Michael"){
dir = "C:/Users/Michael/Dropbox/FAO_ESS_STUFF/EAR_pilot"#HOME PC
data.dir = "C:/Users/Michael/Dropbox/FAO_ESS_STUFF/EAR_pilot_data/"
} else if (sys[6]=="Rahija") {
dir = "C:/Users/rahija/Dropbox/FAO_ESS_STUFF/EAR_pilot" #FAO PC
data.dir = "C:/Users/rahija/Dropbox/FAO_ESS_STUFF/EAR_pilot_data/"
} else {
stop("Implement location for current user!")
}
setwd(dir)
data <- read.csv(paste0(data.dir,"agstats_final.csv"),
stringsAsFactors = FALSE)
source("R/cleanFigures.R")
data <- cleanFigures(data)
#--------CREATE FIGURE EXPENDITURES BY COUNTRY
#Get expenditure data
test.c <- colnames(data) %in% NA
data <- data[!test.c]
colnames(data)
data.c <- filter(data, assCountry == 1)
data.d <- select(data.c, country,budget)
data.d <- filter(data.d, !is.na(budget))
x <- strsplit(data.d$country,",")
data.d$denom <- sapply(x,length)
options(scipen = 999)
data.d$totl <- data.d$budget/data.d$denom
names(x) <- data.d$totl
x1 = lapply(names(x), function(name){
data.frame(amount = name,
country = x[[name]])
})
master <- do.call("rbind", x1)
master$country <- as.character(master$country)
master$amount <- as.numeric(as.character(master$amount))
master$country <- countrycode(master$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- master %>%
group_by(country) %>%
summarize(amount = sum(amount))
#Get data frame w/ polygons and centroids
centroid <- as.data.frame(fao_world_centroids)
centroid <- select(centroid,ADM0_NAME,x,y)
colnames(centroid) <- c("country","clong","clat")
centroid$country <- as.character(centroid$country)
temp <- data.frame(country = c("Cabo Verde","Comoros", "Kiribati", "Tonga"),
clong = c(-23.627155,43.335468,-157.409388,-175.161552),
clat = c(15.088946,-11.664959,1.881687,-21.172421))
centroid <- rbind(temp,centroid)
centroid$country <- countrycode(centroid$country, origin = "country.name",
destination = "country.name", warn = TRUE)
master <- merge(master,centroid, by = "country", all = TRUE)
fao_world2 = fortify(fao_world)
countryName = fao_world@data
countryName$id = rownames(countryName)
fao_world2 = merge(fao_world2, countryName, by = "id")
#filter data
master.t <- filter(master,!is.na(amount))
fao_world2 <- filter(fao_world2, ADM0_NAME != "Antarctica")
fao_world2 <- arrange(fao_world2,order)
#master.t$amount <- master.t$amount/1000
master.t$country  <- gsub("^ +","", master.t$country)
###MISSING CENTROIDS FOR KIRIBATI, AND TONGA ##---
ggplot() +
geom_polygon(data=fao_world2, aes(x=long, y=lat, group = group),colour="black", fill="grey" ) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
geom_point( data=master.t, aes(x=clong, y=clat, size = amount), color="darkgreen") +
scale_size_continuous(name="Total Funding \n(1000 USD)", range = c(4,8), breaks=c(2000,6000,8000,10000))
write.csv(master.t,file = "~/Dropbox/ad_hoc_R/agGraphics/master.csv",
row.names = FALSE)
write.csv(fao_world2, file = "~/Dropbox/ad_hoc_R/agGraphics/fao_world2.csv",
row.names = FALSE)
#attemp_map
library(plotly)
Sys.setenv("plotly_username"="michael.rahija")
Sys.setenv("plotly_api_key"="juzl1e5163")
dir <- "~/Dropbox/ad_hoc_R/agGraphics/"
setwd(dir)
data1 <- read.csv("master.csv", stringsAsFactors = FALSE)
data1$hover <- paste(data1$country, "Amount", data1$amount, " USD")
data1$q <- with(data1, cut(amount, quantile(amount)))
levels(data1$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data1$q <- as.ordered(data1$q)
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/1000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
#attemp_map
library(plotly)
Sys.setenv("plotly_username"="michael.rahija")
Sys.setenv("plotly_api_key"="juzl1e5163")
dir <- "~/Dropbox/ad_hoc_R/agGraphics/"
setwd(dir)
data1 <- read.csv("master.csv", stringsAsFactors = FALSE)
data1$hover <- paste(data1$country, "Amount", data1$amount, " USD")
data1$q <- with(data1, cut(amount, quantile(amount)))
levels(data1$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data1$q <- as.ordered(data1$q)
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/1000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/10000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/100000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/1000000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
type = "scattergeo"
marker = list(size = amount/500000),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
dir <- "~/Dropbox/ad_hoc_R/agGraphics/"
setwd(dir)
data1 <- read.csv("master.csv", stringsAsFactors = FALSE)
data1$hover <- paste(data1$country, "Amount", data1$amount, " USD")
data1$q <- with(data1, cut(amount, quantile(amount)))
levels(data1$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
data1$q <- as.ordered(data1$q)
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 5),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world',zmin = 1, zmax=10) %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world',) %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world', colorscale = "black") %>%
layout(geo = g)
p
plotly_POST(p, filename = "r-docs/test_map2")
?quantile
data1$q <- with(data1, cut(amount, quantile(amount, probs = seq(0,1,.1))))
levels(data1$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th","6th","7th","8th","9th","10th"), "Quantile")
data1$q <- as.ordered(data1$q)
g <- list(
scope = 'world',
projection = list(type = 'equirectangular'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/500000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
?"plotly"
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/20000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/200000, sizemin = 4),
color = q, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/200000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/2000000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/100000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/150000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/200000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/250000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
p<- plot_ly(data1, lon = clong, lat = clat, text = hover,
marker = list(size = amount/300000, sizemin = 4),
color = amount, type = 'scattergeo', locationmode = 'world') %>%
layout(geo = g)
p
library(dplyr)
library(reshape)
library(xlsx)
library(ggplot2)
library(ggmap)
#Set working directory
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/CROP/Indonesia/cropIndo" #Mac
dd = "~/Dropbox/CROP/Indonesia/listing_data/"
hhdir = "~/Dropbox/CROP/Indonesia/hh_coordinates"
sdir = "~/Dropbox/CROP/Indonesia/shape_files"
} else {
wdir = "C:/Users/rahija/Dropbox/Tanzania_Vet_Services_Project/Live_data_collection/Metadata_reporting/program"
mdir = "C:/Users/rahija/Dropbox/Tanzania_Vet_Services_Project/Live_data_collection/"
}
#set working directory
setwd(wdir)
#ID actions files
files = list.files(dd, pattern = "actions")
data.list <- list()
#Accumulate actions data in a list
for (i in 1:length(files)){
data.temp <- read.delim(paste0(dd,"/",files[i]), header = TRUE,
stringsAsFactors = FALSE)
data.list[[i]] <- data.temp
}
#Merge list into one data frame
data <- do.call("rbind", data.list)
#keep only unique rows
data <- unique(data)
# ### REMOVE PREVIOUSLY COMPLETED INTERVIEWS! ##
#   #filter for only interviews that were completed today
#   data$Date <- as.character(data$Date)
#   today <- format((Sys.Date()),"%m/%d/%Y")
#   test <- data$Date %in% today
#   data.today <- data[test,]
source("R/mergeListing.R")
data <- mergeListing(dd = "~/Dropbox/CROP/Indonesia/")
head(data)
unique(data$censusBuildingId)
nrow(data) > length(unique(data$physicalBuildingId))
nrow(data) - length(unique(data$physicalBuildingId))
duplicated(data[,1])
samp <- data[duplicated(data$physicalBuildingId),]
head(samp)
samp
?duplicated
a <- c("a","a","b","c")
duplicated(a)
duplicated(a, fromLast = TRUE)
samp <- rbind(samp,data[duplicated(data$physicalBuildingId, fromLast = TRUE),])
samp
samp <- arrange(samp,phyiscalBuildingId)
colnames(samp)
samp <- arrange(samp,physicalBuildingId)
samp
library(dplyr)
library(reshape)
library(xlsx)
library(ggplot2)
#Set working directory
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/CROP/Indonesia/cropIndo" #Mac
dd = "~/Dropbox/CROP/Indonesia/listing_data/"
hhdir = "~/Dropbox/CROP/Indonesia/hh_coordinates"
sdir = "~/Dropbox/CROP/Indonesia/shape_files"
} else {
wdir = "C:/Users/rahija/Dropbox/Tanzania_Vet_Services_Project/Live_data_collection/Metadata_reporting/program"
mdir = "C:/Users/rahija/Dropbox/Tanzania_Vet_Services_Project/Live_data_collection/"
}
#set working directory
setwd(wdir)
#ID actions files
files = list.files(dd, pattern = "actions")
data.list <- list()
#Accumulate actions data in a list
for (i in 1:length(files)){
data.temp <- read.delim(paste0(dd,"/",files[i]), header = TRUE,
stringsAsFactors = FALSE)
data.list[[i]] <- data.temp
}
#Merge list into one data frame
data <- do.call("rbind", data.list)
#keep only unique rows
data <- unique(data)
