#explore a bit Imb Casa_vendita
library(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
pullNewAddresses()
pullNewAddresses()
ibrary(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
dataFiles = list.files(savingDir, pattern = ".Rdta")
mioFiles = dataFiles[grepl("^Vend_Casa", dataFiles)]
load(paste0(savingDir,mioFiles))
d <- as.data.frame(master)
#########################
##   GENERAL CLEANING  ##
#########################
# REMOVE DUPLICATES
d <- unique(d)
#clean column names
colnames(d) <- gsub("[^a-zA-Z0-9]","",colnames(d))
#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
ibrary(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
dataFiles = list.files(savingDir, pattern = ".Rdta")
mioFiles = dataFiles[grepl("^Vend_Casa", dataFiles)]
load(paste0(savingDir,mioFiles))
d <- as.data.frame(master)
#########################
##   GENERAL CLEANING  ##
#########################
# REMOVE DUPLICATES
d <- unique(d)
#clean column names
colnames(d) <- gsub("[^a-zA-Z0-9]","",colnames(d))
#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
#explore a bit Imb Casa_vendita
library(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
dataFiles = list.files(savingDir, pattern = ".Rdta")
mioFiles = dataFiles[grepl("^Vend_Casa", dataFiles)]
load(paste0(savingDir,mioFiles))
d <- as.data.frame(master)
#########################
##   GENERAL CLEANING  ##
#########################
# REMOVE DUPLICATES
d <- unique(d)
#clean column names
colnames(d) <- gsub("[^a-zA-Z0-9]","",colnames(d))
#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
colnames(d)
tab <- d %>% group_by(Locali) %>% summarize(n())
tab
data.frame(tab)
source('~/Dropbox/ad_hoc_R/regression models/Quiz1.R')
.4(1.5)
.4*(1.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
meanx(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
num <- sum(x*y)
denom <- sum(x^2)
num/denom
library(datasets)
df <- data(mtcars)
lm(mpg ~ wt, data = mtcars)
.4*(1.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~x)
summary(cars)
data(diamond)
library(ggplot2)
data(diamond)
library(datasets)
data("diamonds")
head(ddiamonds)
head(diamonds)
y <- diamonds$price
x <- diamonds$carat
residuals(lm(y~x))
sum(residuals(lm(y~x)))
res <- residuals(lm(y~x))
mod <- lm(y~x)
mod
yhat <- predict(mod)
res == (yhat - y)
yhat <- predict(mod)
sum(resid(mod) == y - yhat)
library(data.table)
DT = data.table(var1=1:10,var2=sample(letters[1:3],10,T))
DT
str(DT)
######################################################################
######################################################################
#R basic objects
vec=c(1,3,5,1000)
mat=matrix(rnorm(6),2)
df=data.frame(var1=1:3,var2=letters[1:3])
ls= list(x = vec, y = rnorm(1000))
ar=array(1:3, c(2,4))
#some basic manipulation
df=data.frame(var1=1:10,var2=sample(letters[1:3],10,T))
df
a.df=df[df$var2=="a",]
mean.a=mean(a.df$var1)
######################################################################
######################################################################
########data.table package
library(data.table)
######################################################################
######################################################################
##CREATION
#function data.table
DT=data.table(var1=1:10,var2=sample(letters[1:3],10,T))
DT #no row names; note the ":" in front of each row
class(DT) #being  a data.frame too, whatever function designed
######################################################################
######################################################################
#R basic objects
vec=c(1,3,5,1000)
mat=matrix(rnorm(6),2)
df=data.frame(var1=1:3,var2=letters[1:3])
ls= list(x = vec, y = rnorm(1000))
ar=array(1:3, c(2,4))
#some basic manipulation
df=data.frame(var1=1:10,var2=sample(letters[1:3],10,T))
df
a.df=df[df$var2=="a",]
mean.a=mean(a.df$var1)
######################################################################
######################################################################
########data.table package
library(data.table)
######################################################################
######################################################################
##CREATION
#function data.table
DT=data.table(var1=1:10,var2=sample(letters[1:3],10,T))
DT #no row names; note the ":" in front of each row
class(DT) #being  a data.frame too, whatever function designed
# for data.frame will work as well on the data.table.
#function fread
args(fread)
setwd("~/Dropbox/ad_hoc_R/data.table")
setwd("~/Dropbox/ad_hoc_R/data.table")
######################################################################
######################################################################
#R basic objects
vec=c(1,3,5,1000)
mat=matrix(rnorm(6),2)
df=data.frame(var1=1:3,var2=letters[1:3])
ls= list(x = vec, y = rnorm(1000))
ar=array(1:3, c(2,4))
#some basic manipulation
df=data.frame(var1=1:10,var2=sample(letters[1:3],10,T))
df
a.df=df[df$var2=="a",]
mean.a=mean(a.df$var1)
######################################################################
######################################################################
########data.table package
library(data.table)
######################################################################
######################################################################
##CREATION
#function data.table
DT=data.table(var1=1:10,var2=sample(letters[1:3],10,T))
DT #no row names; note the ":" in front of each row
class(DT) #being  a data.frame too, whatever function designed
# for data.frame will work as well on the data.table.
#function fread
args(fread)
# function (  input = "",  ----- filename
#             sep = "auto", ----- delimiter
#             header = "auto", ----- column names
#             select = NULL, -----which columns to keep
#             drop = NULL, ---- which columns to drop
#             autostart = 30L, ---- number of lines used to detect the delimiter
#             .)
#
#DT=fread("bigdatafile.csv")
# 32 sec to read 26mln rows, 13 variables
DT=fread("smallerdatafile.csv")
DT #only the first and last 6 rows are displayed
?fread
DT=fread("smallerdatafile.csv")
fread("smallerdatafile.csv")
DT=fread("smallerdatafile.csv")
###basic data.frame exploration tools
str(DT)
head(DT)
tail(DT)
View(DT)
dim(DT)
install.packages("rticles")
vec=names(DT)
new.vec=gsub(" ","",vec) 	#delete the blanks in the colnames
names(DT)=new.vec 	#READ WARNING
setnames(DT,vec, new.vec)
sel.dt=DT[Unit=="tonnes"]
sel.dt
DT[,Year]
DT[,list(Year)]
DT[1:10,list(Value,Year)]
DT[1:10,list(Year,Value)]
DT[1:10,list(1,2)]
DT[1:10,c(1,2)]
DT[1,2]
DT[3,Value, with = F]
DT[3,"Value", with = F]
DT[,!c("Value"), with = F]
DT[,   sum(Value) ]
DT[, . (sum(Value)) ]
DT[, . (sum(Value)) ]
DT[, . (sum(Value), min(Year)) ]  		#combine
DT[, .(unique(Value)) ]
DT[, . (val=sum(Value), y=min(Year)) ]  	#rename
DT[1:100, plot(Value) ] #no output
DT[Element=="Import Value", . (sum(Value), min(Year)) ]
DT[,.(Value,mean(Value),sd(Value))]
DT[,unique(Value),unique(Year)]
DT[,(unique(Value),unique(Year))]
DT[,.(unique(Value),unique(Year))]
DT[,mean.Item:=mean(Value),by=ItemCode]
DT[Year==2011,sd.Item:=sd(Value),by=ItemCode]
DT[, .(.N), by= ItemCode] #original order
DT[, .(.N), keyby= ItemCode] #ascending order of groups
DT[, .(.N), by= .(ItemCode,Unit)] [order(ItemCode,-Unit)]
DT[, .(.N), by=.(Unit, Value>1000)]
DT[Year==2011,.(m.val=mean(Value)),by=ItemCode][order(m.val)]
# .SD operator
new=DT[,.(V1=min(Value),
V2=max(Value),
V3=mean(Value),
V4=median(Value)),by=.(Year,ItemCode)]
new
new[,lapply(.SD,min),by=Year]
new[,lapply(.SD,min),by=Year,.SDcols=-c("V1","V3")]
DT[,newcol:=Value+5]   #invisible result;
DT[,c("a","b"):=list(Value+5,substr(ItemCode,1,2))]
DT
DT
tables()
setkey(DT , ItemCode)
tables()
setkey(DT ,  ReporterCountries,Element,Unit)
DT
tables()
#sets the key AND orders the DT w.r.t the key
DT
setkey(DT ,  ReporterCountries,Element,Unit)
#removes the previous key and sets the new key (order incl.)
key(DT) # the keys of a dt
DT
setkeyv(DT,"ItemCode") #syntax useful in programming
DT
##subsets using keys
key(DT)
DT[.(15)] #no need to specify the key variable
#sets the key AND orders the DT w.r.t the key
DT
setkey(DT ,  ReporterCountries,Element,Unit)
#removes the previous key and sets the new key (order incl.)
key(DT) # the keys of a dt
DT
setkeyv(DT,"ItemCode") #syntax useful in programming
DT
##subsets using keys
key(DT)
DT[.(15)] #no need to specify the key variable
#it uses the order; equal values are adjacent BINARY SEARCH!!!!
DT[.(c(15,30))]
#sets the key AND orders the DT w.r.t the key
DT
setkey(DT ,  ReporterCountries,Element,Unit)
#removes the previous key and sets the new key (order incl.)
key(DT) # the keys of a dt
DT
setkeyv(DT,"ItemCode") #syntax useful in programming
DT
##subsets using keys
key(DT)
DT[.(15)] #no need to specify the key variable
#it uses the order; equal values are adjacent BINARY SEARCH!!!!
DT[.(c(15,30))]
DT[.(c(15,30,40:100))]
DT[,mean.Item:=mean(Value),by=ItemCode]
ar=array(1:3, c(2,4))
ar
mat=matrix(rnorm(6),2)
mat
library(dplyr)
library(reshape)
library(xlsx)
library(ggplot2)
library(ggmap)
#Set working directory
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/CROP/Indonesia/cropIndo" #Mac
dd = "~/Dropbox/CROP/Indonesia/listing_data/"
hhdir = "~/Dropbox/CROP/Indonesia/hh_coordinates"
sdir = "~/Dropbox/CROP/Indonesia/shape_files"
} else {
wdir = "C:/Users/rahija/Dropbox/Tanzania_Vet_Services_Project/Live_data_collection/Metadata_reporting/program"
mdir = "C:/Users/rahija/Dropbox/Tanzania_Vet_Services_Project/Live_data_collection/"
}
#set working directory
setwd(wdir)
#ID actions files
files = list.files(dd, pattern = "actions")
data.list <- list()
#Accumulate actions data in a list
for (i in 1:length(files)){
data.temp <- read.delim(paste0(dd,"/",files[i]), header = TRUE,
stringsAsFactors = FALSE)
data.list[[i]] <- data.temp
}
#Merge list into one data frame
data <- do.call("rbind", data.list)
#keep only unique rows
data <- unique(data)
source("R/mergeListing.R")
data <- mergeListing(dd = "~/Dropbox/CROP/Indonesia/")
colnames(data)
plot(data$ssSys_IRnd)
hist(data$ssSys_IRnd)
